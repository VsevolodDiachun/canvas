{"ast":null,"code":"export default class Tool {\n  constructor(canvas, socket, id) {\n    // constructor(canvas: HTMLCanvasElement | null) {\n    this.canvas = void 0;\n    this.ctx = void 0;\n    this.socket = void 0;\n    this.id = void 0;\n    this.canvas = canvas;\n    this.socket = socket;\n    this.id = id;\n    //this.imgReturn()\n    if (canvas) this.ctx = canvas.getContext('2d');\n    //this.ctx = null\n\n    this.destroyEvents();\n  }\n  set fillColor(color) {\n    this.ctx.fillStyle = color;\n  }\n  set strokeColor(color) {\n    this.ctx.strokeStyle = color;\n  }\n  set lineWidth(width) {\n    this.ctx.lineWidth = width;\n  }\n\n  // imgReturn() {\n  //     const canvasElement = document.createElement('canvas');\n  //     canvasElement.width = 1000;\n  //     canvasElement.height = 600;\n  //     const img = new Image()\n  //     const {fff, fff2} = this.canvas\n  //     this.canvas = canvasElement\n  //     this.ctx = fff\n  //     img.src = fff2\n  //     img.onload = () => {\n  //         try {\n  //             this.ctx.drawImage(img, 0, 0, canvasElement.width, canvasElement.height)\n\n  //             //context.drawImage(img, 0, 0, canvasElement.width, canvasElement.height);\n  //             // let f3 = this.canvas\n  //             // this.canvas = canvasElement\n  //             // //this.canvas.src = img.src;\n  //             // console.log('fff1')\n  //             // //console.log(this.canvas)\n  //             // this.ctx = this.canvas.getContext('2d')\n  //             // console.log('fff2')\n  //             // console.log(f3)\n  //             // console.log(this.canvas)\n  //             // this.ctx.drawImage(img.src, 0, 0, this.canvas.width, this.canvas.height);\n  //             // console.log('fff3')\n  //             // //console.log(this.canvas)\n  //             // console.log(this.ctx)\n  //         } catch (e) {\n  //             console.log(e)\n  //         }\n  //     }\n  // }\n\n  destroyEvents() {\n    if (this.canvas) {\n      this.canvas.onmousemove = null;\n      this.canvas.onmousedown = null;\n      this.canvas.onmouseup = null;\n    }\n  }\n}","map":{"version":3,"names":["Tool","constructor","canvas","socket","id","ctx","getContext","destroyEvents","fillColor","color","fillStyle","strokeColor","strokeStyle","lineWidth","width","onmousemove","onmousedown","onmouseup"],"sources":["/Users/diachun/WebstormProjects/canvas/client/src/tools/Tool.ts"],"sourcesContent":["import {WebSocketType} from \"../utils/consts\";\n\nexport default class Tool {\n    // constructor(canvas: HTMLCanvasElement | null) {\n    canvas: any;\n    ctx: any;\n    socket: WebSocket | null;\n    id: string | null;\n    constructor(canvas: any, socket: WebSocket | null, id: string | null) {\n        this.canvas = canvas\n        this.socket = socket\n        this.id = id\n        //this.imgReturn()\n        if (canvas) this.ctx = canvas.getContext('2d')\n        //this.ctx = null\n        \n        this.destroyEvents()\n    }\n\n    set fillColor(color: string) {\n        this.ctx.fillStyle = color\n    }\n\n    set strokeColor(color: string) {\n        this.ctx.strokeStyle = color\n    }\n\n    set lineWidth(width: string) {\n        this.ctx.lineWidth = width\n    }\n\n    // imgReturn() {\n    //     const canvasElement = document.createElement('canvas');\n    //     canvasElement.width = 1000;\n    //     canvasElement.height = 600;\n    //     const img = new Image()\n    //     const {fff, fff2} = this.canvas\n    //     this.canvas = canvasElement\n    //     this.ctx = fff\n    //     img.src = fff2\n    //     img.onload = () => {\n    //         try {\n    //             this.ctx.drawImage(img, 0, 0, canvasElement.width, canvasElement.height)\n            \n            \n            \n    //             //context.drawImage(img, 0, 0, canvasElement.width, canvasElement.height);\n    //             // let f3 = this.canvas\n    //             // this.canvas = canvasElement\n    //             // //this.canvas.src = img.src;\n    //             // console.log('fff1')\n    //             // //console.log(this.canvas)\n    //             // this.ctx = this.canvas.getContext('2d')\n    //             // console.log('fff2')\n    //             // console.log(f3)\n    //             // console.log(this.canvas)\n    //             // this.ctx.drawImage(img.src, 0, 0, this.canvas.width, this.canvas.height);\n    //             // console.log('fff3')\n    //             // //console.log(this.canvas)\n    //             // console.log(this.ctx)\n    //         } catch (e) {\n    //             console.log(e)\n    //         }\n    //     }\n    // }\n\n    destroyEvents() {\n        if (this.canvas) {\n            this.canvas.onmousemove = null\n            this.canvas.onmousedown = null\n            this.canvas.onmouseup = null\n        }\n    }\n}"],"mappings":"AAEA,eAAe,MAAMA,IAAI,CAAC;EAMtBC,WAAWA,CAACC,MAAW,EAAEC,MAAwB,EAAEC,EAAiB,EAAE;IALtE;IAAA,KACAF,MAAM;IAAA,KACNG,GAAG;IAAA,KACHF,MAAM;IAAA,KACNC,EAAE;IAEE,IAAI,CAACF,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,EAAE,GAAGA,EAAE;IACZ;IACA,IAAIF,MAAM,EAAE,IAAI,CAACG,GAAG,GAAGH,MAAM,CAACI,UAAU,CAAC,IAAI,CAAC;IAC9C;;IAEA,IAAI,CAACC,aAAa,CAAC,CAAC;EACxB;EAEA,IAAIC,SAASA,CAACC,KAAa,EAAE;IACzB,IAAI,CAACJ,GAAG,CAACK,SAAS,GAAGD,KAAK;EAC9B;EAEA,IAAIE,WAAWA,CAACF,KAAa,EAAE;IAC3B,IAAI,CAACJ,GAAG,CAACO,WAAW,GAAGH,KAAK;EAChC;EAEA,IAAII,SAASA,CAACC,KAAa,EAAE;IACzB,IAAI,CAACT,GAAG,CAACQ,SAAS,GAAGC,KAAK;EAC9B;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAIA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEAP,aAAaA,CAAA,EAAG;IACZ,IAAI,IAAI,CAACL,MAAM,EAAE;MACb,IAAI,CAACA,MAAM,CAACa,WAAW,GAAG,IAAI;MAC9B,IAAI,CAACb,MAAM,CAACc,WAAW,GAAG,IAAI;MAC9B,IAAI,CAACd,MAAM,CAACe,SAAS,GAAG,IAAI;IAChC;EACJ;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}
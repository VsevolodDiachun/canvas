{"ast":null,"code":"export default class Tool {\n  constructor(canvas) {\n    // constructor(canvas: HTMLCanvasElement | null) {\n    this.canvas = void 0;\n    this.ctx = void 0;\n    this.canvas = canvas;\n    this.imgReturn();\n    // if (canvas) this.ctx = canvas.getContext('2d')\n    if (canvas) this.ctx = null;\n    this.destroyEvents();\n  }\n  set fillColor(color) {\n    this.ctx.fillStyle = color;\n  }\n  set strokeColor(color) {\n    this.ctx.strokeStyle = color;\n  }\n  set lineWidth(width) {\n    this.ctx.lineWidth = width;\n  }\n  imgReturn() {\n    const canvasElement = document.createElement('canvas');\n    canvasElement.width = 1000;\n    canvasElement.height = 600;\n    const img = new Image();\n    console.log;\n    this.ctx = canvasElement.getContext('2d');\n    img.src = img.onload = () => {\n      const context = canvasElement.getContext('2d');\n      if (context) {\n        try {\n          //context.drawImage(img, 0, 0, canvasElement.width, canvasElement.height);\n\n          // let f3 = this.canvas\n          // this.canvas = canvasElement\n\n          // //this.canvas.src = img.src;\n          // console.log('fff1')\n          // //console.log(this.canvas)\n          // this.ctx = this.canvas.getContext('2d')\n          // console.log('fff2')\n          // console.log(f3)\n          // console.log(this.canvas)\n          // this.ctx.drawImage(img.src, 0, 0, this.canvas.width, this.canvas.height);\n          // console.log('fff3')\n          // //console.log(this.canvas)\n          // console.log(this.ctx)\n        } catch (e) {\n          console.log(e);\n        }\n      }\n    };\n  }\n  destroyEvents() {\n    if (this.canvas) {\n      this.canvas.onmousemove = null;\n      this.canvas.onmousedown = null;\n      this.canvas.onmouseup = null;\n    }\n  }\n}","map":{"version":3,"names":["Tool","constructor","canvas","ctx","imgReturn","destroyEvents","fillColor","color","fillStyle","strokeColor","strokeStyle","lineWidth","width","canvasElement","document","createElement","height","img","Image","console","log","getContext","src","onload","context","e","onmousemove","onmousedown","onmouseup"],"sources":["/Users/diachun/WebstormProjects/canvas/client/src/tools/Tool.ts"],"sourcesContent":["export default class Tool {\n    // constructor(canvas: HTMLCanvasElement | null) {\n    canvas: any\n    ctx: any \n    constructor(canvas: any) {\n        this.canvas = canvas\n        this.imgReturn()\n        // if (canvas) this.ctx = canvas.getContext('2d')\n        if (canvas) this.ctx = null\n        \n        this.destroyEvents()\n    }\n\n    set fillColor(color: string) {\n        this.ctx.fillStyle = color\n    }\n\n    set strokeColor(color: string) {\n        this.ctx.strokeStyle = color\n    }\n\n    set lineWidth(width: string) {\n        this.ctx.lineWidth = width\n    }\n\n    imgReturn() {\n        const canvasElement = document.createElement('canvas');\n        canvasElement.width = 1000;\n        canvasElement.height = 600;\n        const img = new Image()\n        console.log\n        this.ctx = canvasElement.getContext('2d')\n        img.src = \n        img.onload = () => {\n            const context = canvasElement.getContext('2d');\n            if (context) {\n                try {\n            //context.drawImage(img, 0, 0, canvasElement.width, canvasElement.height);\n            \n            \n            // let f3 = this.canvas\n            // this.canvas = canvasElement\n            \n            // //this.canvas.src = img.src;\n            // console.log('fff1')\n            // //console.log(this.canvas)\n            // this.ctx = this.canvas.getContext('2d')\n            // console.log('fff2')\n            // console.log(f3)\n            // console.log(this.canvas)\n            // this.ctx.drawImage(img.src, 0, 0, this.canvas.width, this.canvas.height);\n            // console.log('fff3')\n            // //console.log(this.canvas)\n            // console.log(this.ctx)\n                } catch (e) {\n                    console.log(e)\n                }\n            }\n        }\n    }\n\n    destroyEvents() {\n        if (this.canvas) {\n            this.canvas.onmousemove = null\n            this.canvas.onmousedown = null\n            this.canvas.onmouseup = null\n        }\n    }\n}"],"mappings":"AAAA,eAAe,MAAMA,IAAI,CAAC;EAItBC,WAAWA,CAACC,MAAW,EAAE;IAHzB;IAAA,KACAA,MAAM;IAAA,KACNC,GAAG;IAEC,IAAI,CAACD,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACE,SAAS,CAAC,CAAC;IAChB;IACA,IAAIF,MAAM,EAAE,IAAI,CAACC,GAAG,GAAG,IAAI;IAE3B,IAAI,CAACE,aAAa,CAAC,CAAC;EACxB;EAEA,IAAIC,SAASA,CAACC,KAAa,EAAE;IACzB,IAAI,CAACJ,GAAG,CAACK,SAAS,GAAGD,KAAK;EAC9B;EAEA,IAAIE,WAAWA,CAACF,KAAa,EAAE;IAC3B,IAAI,CAACJ,GAAG,CAACO,WAAW,GAAGH,KAAK;EAChC;EAEA,IAAII,SAASA,CAACC,KAAa,EAAE;IACzB,IAAI,CAACT,GAAG,CAACQ,SAAS,GAAGC,KAAK;EAC9B;EAEAR,SAASA,CAAA,EAAG;IACR,MAAMS,aAAa,GAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;IACtDF,aAAa,CAACD,KAAK,GAAG,IAAI;IAC1BC,aAAa,CAACG,MAAM,GAAG,GAAG;IAC1B,MAAMC,GAAG,GAAG,IAAIC,KAAK,CAAC,CAAC;IACvBC,OAAO,CAACC,GAAG;IACX,IAAI,CAACjB,GAAG,GAAGU,aAAa,CAACQ,UAAU,CAAC,IAAI,CAAC;IACzCJ,GAAG,CAACK,GAAG,GACPL,GAAG,CAACM,MAAM,GAAG,MAAM;MACf,MAAMC,OAAO,GAAGX,aAAa,CAACQ,UAAU,CAAC,IAAI,CAAC;MAC9C,IAAIG,OAAO,EAAE;QACT,IAAI;UACR;;UAGA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;QAAA,CACK,CAAC,OAAOC,CAAC,EAAE;UACRN,OAAO,CAACC,GAAG,CAACK,CAAC,CAAC;QAClB;MACJ;IACJ,CAAC;EACL;EAEApB,aAAaA,CAAA,EAAG;IACZ,IAAI,IAAI,CAACH,MAAM,EAAE;MACb,IAAI,CAACA,MAAM,CAACwB,WAAW,GAAG,IAAI;MAC9B,IAAI,CAACxB,MAAM,CAACyB,WAAW,GAAG,IAAI;MAC9B,IAAI,CAACzB,MAAM,CAAC0B,SAAS,GAAG,IAAI;IAChC;EACJ;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}